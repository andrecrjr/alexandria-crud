// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int          @id @default(autoincrement())
  username   String?      @unique
  email      String       @unique
  password   String
  profile    Profile?     @relation(fields: [profileId], references: [id])
  profileId  Int?         @unique
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  userCollection Collection[]
  userCreatedContent    Content[]
}

model Profile {
  id          Int          @id @default(autoincrement())
  bio         String?
  location    String?
  age         Int?
  gender      String?
  interests   String[] // Pode ser um array de interesses
  collections Collection[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  user        User?
}

model Collection {
  id        Int      @id @default(autoincrement())
  name      String
  type      String // Ex: Lendo, Lido, Pausado, Abandonado, etc.
  page      Int // Contador de páginas lidas ou posição atual de leitura
  user      User     @relation(fields: [userId], references: [id])
  userId    Int      @map("user_id")
  contentId Int      @map("content_id")
  content   Content  @relation(fields: [contentId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Profile   Profile? @relation(fields: [profileId], references: [id])
  profileId Int?
}

// Este modelo representa o banco de dados separado para os tipos de conteúdo
model ContentType {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  contents Content[]
}

// Atualizando o modelo Content para usar o novo banco de dados para ContentType
model Content {
  id          Int          @id @default(autoincrement())
  title       String
  description String?
  type        ContentType  @relation(fields: [typeId], references: [id])
  typeId      Int
  isbn        String?
  imageUrl    String?
  createdBy   User?        @relation(fields: [createdById], references: [id])
  createdById Int?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  collection  Collection[] 
  numberPages Int
}
