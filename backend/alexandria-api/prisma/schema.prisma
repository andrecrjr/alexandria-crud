// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int       @id @default(autoincrement())
  username           String?   @unique
  email              String    @unique
  password           String
  profile            Profile?  @relation(fields: [id], references: [id], onDelete: Cascade)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  userCreatedContent Content[]
  userCreatedAuthors AuthorContent[]
  userActive Boolean @default(true)
}

model Profile {
  id              Int          @id @default(autoincrement())
  bio             String? @default("")
  location        String?
  age             Int?
  gender          String?
  interests       String[] // Pode ser um array de interesses
  userCollections Collection[]
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  user            User?
}

model Collection {
  id        Int      @id @default(autoincrement())
  type      String // Ex: Lendo, Lido, Pausado, Abandonado, etc.
  page      Int      @default(10)
  profileId Int      @map("profile_id")
  contentId Int      @map("content_id")
  content   Content  @relation(fields: [contentId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  profile   Profile? @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@unique([contentId, profileId])
}

model StatusContentypeUser {
  id          Int           @id @default(autoincrement())
  name        String[]
  contentType ContentType[]
}

// Este modelo representa o banco de dados separado para os tipos de conte√∫do
model ContentType {
  id         Int                   @id @default(autoincrement())
  name       String                @unique
  statusType StatusContentypeUser? @relation(fields: [statusTypeId], references: [id])
  statusTypeId Int
  contents   Content[]
}

model Content {
  id          Int          @id @default(autoincrement())
  title       String
  description String?
  type        ContentType  @relation(fields: [typeId], references: [id])
  typeId      Int
  isbn        String?
  imageUrl    String?
  createdBy   User?        @relation(fields: [createdById], references: [id])
  createdById Int?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  collection  Collection[]
  numberPages Int
  authors AuthorContent[]
}

model AuthorContent {
  id            Int          @id @default(autoincrement())
  name          String?
  bio           String?
  born          DateTime?
  died          DateTime?
  nationality   String?
  awards        String[]
  photoUrl      String?      // URL to a photo of the author
  website       String?      // Official website or profile
  genres        String[]     // List of genres the author writes in
  socialMedia   Json?        // Social media links, stored in JSON format
  bestSellers   String[]     // List of best-selling works
  influences    String[]     // List of authors who influenced this author
  influenced    String[]     // List of authors influenced by this author
  contents      Content[]
  createdBy   User?        @relation(fields: [createdById], references: [id])
  createdById Int?
}